import emailjs from '@emailjs/browser';

// EmailJS configuration
// You'll need to sign up at https://www.emailjs.com/ and get these values
const EMAILJS_SERVICE_ID = import.meta.env.VITE_EMAILJS_SERVICE_ID || 'service_revado';
const EMAILJS_TEMPLATE_ID = import.meta.env.VITE_EMAILJS_TEMPLATE_ID || 'template_health_records';
const EMAILJS_PUBLIC_KEY = import.meta.env.VITE_EMAILJS_PUBLIC_KEY || 'YOUR_PUBLIC_KEY_HERE';

// Initialize EmailJS
emailjs.init(EMAILJS_PUBLIC_KEY);

/**
 * Send health records to doctor via email with file attachments
 */
export async function sendHealthRecordsEmail({
  recipientEmail,
  recipientName = 'Healthcare Provider',
  patientName,
  patientEmail,
  recordsSummary,
  pdfAttachment,
  fileAttachments = [], // Array of {name, type, base64} objects
  recordCount,
  dateRange,
  shareLink,
  expirationDate
}) {
  try {
    // Prepare email template parameters
    const templateParams = {
      to_email: recipientEmail,
      to_name: recipientName,
      from_name: patientName,
      from_email: patientEmail,
      record_count: recordCount,
      date_range: dateRange,
      summary: recordsSummary,
      share_link: shareLink || 'Records attached to this email',
      expiration_date: expirationDate || 'N/A',
      reply_to: patientEmail,

      // Additional metadata
      sent_date: new Date().toLocaleDateString(),
      sent_time: new Date().toLocaleTimeString(),

      // Security notice
      security_notice: 'This email contains protected health information. Please handle with appropriate security measures.',

      // PDF summary attachment as base64
      attachment: pdfAttachment,

      // Additional file attachments
      file_count: fileAttachments.length,
      file_list: fileAttachments.map(f => f.name).join(', '),

      // Note: EmailJS has limitations on attachment size
      // For large files, consider using a secure file sharing service
      attachments_note: fileAttachments.length > 0
        ? `This email includes ${fileAttachments.length} file(s): ${fileAttachments.map(f => f.name).join(', ')}`
        : ''
    };

    console.log('[EmailService] Sending email to:', recipientEmail);

    // Send email via EmailJS
    const response = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      templateParams
    );

    console.log('[EmailService] Email sent successfully:', response);

    return {
      success: true,
      messageId: response.text,
      status: response.status,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('[EmailService] Failed to send email:', error);

    // Parse error for user-friendly message
    let errorMessage = 'Failed to send email';

    if (error.text) {
      errorMessage = error.text;
    } else if (error.message) {
      errorMessage = error.message;
    } else if (typeof error === 'string') {
      errorMessage = error;
    }

    // Check for common issues
    if (errorMessage.includes('service_id')) {
      errorMessage = 'Email service not configured. Please contact support.';
    } else if (errorMessage.includes('template_id')) {
      errorMessage = 'Email template not found. Please contact support.';
    } else if (errorMessage.includes('public_key')) {
      errorMessage = 'Email authentication failed. Please contact support.';
    } else if (errorMessage.includes('network')) {
      errorMessage = 'Network error. Please check your connection and try again.';
    }

    return {
      success: false,
      error: errorMessage,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Create a fallback email using mailto link
 * This is used when EmailJS is not configured or fails
 */
export function createMailtoLink({
  recipientEmail,
  patientName,
  recordCount,
  recordsSummary
}) {
  const subject = encodeURIComponent(`Health Records from ${patientName}`);

  const body = encodeURIComponent(`
Dear Healthcare Provider,

${patientName} would like to share their health records with you.

Summary:
- Number of records: ${recordCount}
- Records summary: ${recordsSummary}

Please note: Due to security reasons, the actual records need to be shared through a secure channel. Please contact the patient directly to receive the full records package.

Best regards,
${patientName}

---
This email was generated by Revado Health Records App
  `.trim());

  return `mailto:${recipientEmail}?subject=${subject}&body=${body}`;
}

/**
 * Validate email address format
 */
export function validateEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

/**
 * Format email preview for confirmation dialog
 */
export function formatEmailPreview({
  recipientEmail,
  patientName,
  recordCount,
  dateRange
}) {
  return {
    to: recipientEmail,
    subject: `Health Records from ${patientName}`,
    preview: `Sharing ${recordCount} health records${dateRange ? ` from ${dateRange}` : ''}`,
    securityNote: 'This email will be sent securely with encrypted attachments'
  };
}

/**
 * Check if EmailJS is properly configured
 */
export function isEmailServiceConfigured() {
  return !!(
    EMAILJS_SERVICE_ID &&
    EMAILJS_SERVICE_ID !== 'service_revado' &&
    EMAILJS_TEMPLATE_ID &&
    EMAILJS_TEMPLATE_ID !== 'template_health_records' &&
    EMAILJS_PUBLIC_KEY &&
    EMAILJS_PUBLIC_KEY !== 'YOUR_PUBLIC_KEY_HERE'
  );
}

export default {
  sendHealthRecordsEmail,
  createMailtoLink,
  validateEmail,
  formatEmailPreview,
  isEmailServiceConfigured
};
